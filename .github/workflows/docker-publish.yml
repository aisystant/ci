name: Build and Publish Docker Image

on:
  workflow_call:
    inputs:
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        default: '.'
        type: string
      platforms:
        description: 'Target platforms for build'
        required: false
        default: 'linux/amd64'
        type: string
      push_to_registry:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean
    outputs:
      image:
        description: 'Built image name'
        value: ${{ jobs.build.outputs.image }}
      tags:
        description: 'Image tags'
        value: ${{ jobs.build.outputs.tags }}
      digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.digest }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.dockerfile_path }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push_to_registry }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    outputs:
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
